plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
}

group = 'de.swtpro'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.0'
    // JUnit Jupiter (JUnit 5) for unit testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    // Add this if you need parameterized tests
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    // implementation 'org.springframework.boot:spring-boot-starter-security'
    // implementation 'org.springframework.security:spring-security-core:5.0.0.RELEASE'
}
// Use JUnit Platform for running tests
test {
    useJUnitPlatform()
}
jacoco {
    toolVersion = "0.8.9"
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}
sonar {
    properties {
        property "sonar.token", "sqa_af763199e18b0464b22abe66260a70cbb6c39114"
        property "sonar.host.url", "http://localhost:9000/sonar"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
